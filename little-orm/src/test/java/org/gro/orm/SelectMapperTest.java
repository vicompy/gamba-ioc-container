package org.gro.orm;

import static org.junit.Assert.assertEquals;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;

import javax.sql.DataSource;

import org.gro.orm.datasource.TestingDataSourceFactory;
import org.gro.orm.mapping.SelectMapper;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class SelectMapperTest {

	private static final DataSource ds = TestingDataSourceFactory.getDataSource();

	@Before
	public void beforeMethod() throws SQLException {
		final Connection c = ds.getConnection();
		c.setAutoCommit(false);

		final Statement st = c.createStatement();

		st.execute("CREATE TABLE DOG ("
				+ "ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) PRIMARY KEY, "
				+ "NAME VARCHAR(100), " + "AGE INTEGER" + ")");

		st.execute("INSERT INTO DOG (ID,NAME,AGE) VALUES (2, 'din',10)");
		st.execute("INSERT INTO DOG (ID,NAME,AGE) VALUES (1, 'chucho',3)");
		st.execute("COMMIT");

		c.close();
	}

	@Test
	public void testFindBy() throws Exception {

		final Connection c = ds.getConnection();
		c.setAutoCommit(false);

		try {
			final SelectMapper catSelecter = new SelectMapper(Cat.class);
			final Cat cat = (Cat) catSelecter.queryForEntity(c, "select * from dog where id=1");
			final Cat[] cats = (Cat[]) catSelecter.queryForEntities(c, "select * from dog");

			assertEquals("Dog [age=3, id=1, name=chucho]", cat.toString());
			assertEquals("[Dog [age=3, id=1, name=chucho], Dog [age=10, id=2, name=din]]",
					Arrays.asList(cats).toString());

			c.commit();
		} catch (final Exception e) {
			c.rollback();
			throw e;
		} finally {
//			pool.releaseConnection(c);
			c.close();
		}
	}

	@After
	public void afterMethod() throws SQLException {
		final Connection c = ds.getConnection();
		c.setAutoCommit(false);

		final Statement st = c.createStatement();
		st.execute("DROP TABLE DOG");
		st.execute("SHUTDOWN");

		c.close();
	}

}
